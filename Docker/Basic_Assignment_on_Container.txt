Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
--> docker search nginx
    docker pull nginx
3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
--> docker images 
4. Find out the "Full" ImageId of the image that you pulled and write it below.
--> f0b8a9a541369db503ff3b9d4fa6de561b300f7363920c2bff4577c6c24c5cf6  

5. Create a container of your image 
--> docker run f0b8a9a54136

6. List all the running containers
--> docker ps

7. List all the running and stopped containers
--> docker ps -a

8. Find out the "Full" containerId of the container and write it below.
--> a2c6374482ea5af5b45b732130472e064bddece8d98f31826b94f8ecb1c5932f


9. Find out how many image layers are used to build this image.
--> docker history nginx / Layers are also displayed during docker pull of the image

10. Get the Apache Tomcat 7 server image from the docker hub.
--> docker pull tomcat:7

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
--> docker run tomcat:7 / docker run e614000ce544s

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
--> 172.17.0.3

13. Which Port it is using?
--> 8080

14. Try to access the Tomcat's home page from your machine/vm.
--> http://172.17.0.3:8080

15. What is the disk size of Apache Tomcat image?
--> 532.9 MB

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
-->"PATH=/usr/local/tomcat/bin:/usr/local/openjdk-8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "JAVA_HOME=/usr/local/openjdk-8",
                "LANG=C.UTF-8",
                "JAVA_VERSION=8u292",
                "CATALINA_HOME=/usr/local/tomcat",
                "TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib",
                "LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib",
                "GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23",
                "TOMCAT_MAJOR=7",
                "TOMCAT_VERSION=7.0.109",
                "TOMCAT_SHA512
 	JAVA_HOME and CATALINA_HOME display the paths inside the container and not the host.

17. Find out which port is exposed for tomcat?
--> docker ps 

18. Run multiple containers of tomcat on different port and access it's home page.
--> docker run -p 9090:8080 tomcat:7
    docker run -p 9091:8080 tomcat:7
	IP address/9090 and 9091 to access homepages


19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
-->

20. Run the container of ubuntu in attached mode.
--> docker run -it ubuntu

21. Run the container of another ubuntu in detached mode.
--> docker run -dit ubuntu

22. Check how many ubuntu containers are running and stopped
--> docker ps -a -f ubuntu

23. Is the tomcat container running? If no, start one.
--> docker ps 
    
24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
--> 

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
--> docker run -it ubuntu bash

26. Login as root user in ubuntu container
--> docker run -it ubuntu bash

27. Create a file with any name in root director
--> touch abc.txt

28. Install software of your choice in ubuntu container using "apt-get install"
--> apt-get update
    apt-get install nginx

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
--> exit
30. Check if the ubuntu container is running.
--> docker ps

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
--> docker run -it 7e0aa2d69a15 bash

32. Login as a root user
--> docker run ubuntu

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
--> No

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
--> No the container has exited.

35. Create an Image out of the existing container.
--> docker commit a7cde5bcb312 atharvajoshi198/assign


36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
--> docker run -it 3e8de534daeb bash
    Yes, the software and text file are present


37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
--> Yes


38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

write atleast 1 command using each option above and prove their concepts as described in the --help.


41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".
-->  app*        Docker App (Docker Inc., v0.9.1-beta3)
  builder     Manage builds
  buildx*     Build with BuildKit (Docker Inc., v0.5.1-docker)
  compose*    Docker Compose (Docker Inc., 2.0.0-beta.1)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  scan*       Docker Scan (Docker Inc., v0.8.0)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes



Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp
--> docker cp foo.txt mycontainer:/foo.txt
  used to copy files to and from local system and containers

2. create
--> docker create -t fedora bash
    used to create containers

3. export
--> Export a container's filesystem as a tar archive

4. history
--> docker hsitory 3e8de534daeb

5. info
--> docker info
   display system wide information

6. login
--> docker login
   Login to docker registry
 
7. logout
--> docker logout
    Log out from a Docker registry or cloud backend

8. rename
--> docker rename aab1463e04c7 new_name
    Rename a container

9. save
--> docker save  -o  img 3e8de534daeb
   Save one or more images to a tar archive

10. stats
--> docker stats
    Display a live stream of container(s) resource usage statistics

11. top
--> docker top aab1463e04c7
    Display running processes of container

42. Kill all running container in one liner command.
--> docker rm -f $(docker ps -q)

43. Delete all images in one liner command.
--> docker rmi -f $(docker images -q)

44. Create a simple Dockerfile, build it and run it.
--->
Dockerfile-
From ubuntu
RUN dir
CMD ["echo", "Hello! , Your Dockerfile has been executed Successfully"]

45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
1. USER
2. RUN
3. ENV
4. CMD
5. ENTRYPOINT
6. EXPOSE
7. VOLUME
--->
FROM ubuntu
RUN apt-get update
RUN apt-get -y install apache2
ADD . /var/www/html
ENTRYPOINT apachectl -D FOREGROUND
ENV name DevOps Atharva

46. Dockerhub:-
	Find a application you care about on docker hub.
	--> docker pull ubuntu

	Launch the container.
	--> docker run -it ubuntu bash

	Install another application in it.
	--> apt-get update
	--> apt-get install nginx

	Save (commit) the image.
	-->docker commit 56a817545db1 atharvajoshi198/myapp1

	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.
	--> docker login
	--> docker push atharvajoshi198/myapp1


